"use strict";

import fs from "fs";
import path from "path"
import { Sequelize, DataTypes } from "sequelize";
import { fileURLToPath } from "url";
import { sequelize as manualSequelize } from "../config/database.js";
import { User, Article } from "./Article.js";
import { Category } from "./Category.js";
import { Tag } from "./Tag.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const basename = path.basename(__filename)
const env = process.env.NODE_ENV || "development";
const db = {};

// Initialize Sequelize (auto-generated by sequelize-cli)
let sequelize;
if (manualSequelize) {
    sequelize = manualSequelize;
} else {
    throw new Error("Database connection not properly configured.")
}

// Load all models dynamically
const loadModels = async () => {
    const files = fs
        .readdirSync(__dirname)
        .filter((file) => {
            return (
                file.indexOf('.') !== 0 &&
                file !== basename &&
                file.slice(-3) === '.js' &&
                file.indexOf('.test.js') === -1
            );
        })
    
    for (const file of files) {
        const model = (await import(path.join(__dirname, file))).default(sequelize, DataTypes);
        db[model.name] = model;
    }
};

// Call the loadModels function
await loadModels()

// Add manual models
db.User = User;
db.Article = Article;
db.Category = Category;
db.Tag = Tag;

// Define relationships
Category.hasMany(Article, {
    foreignKey: "category_id",
    as: "articles",
});

Article.belongsTo(Category, {
    foreignKey: "category_id",
    as: "category",
})

User.hasMany(Article, {
    foreignKey: "author_id",
    as: "articles",
});

Article.belongsTo(User, {
    foreignKey: "author_id",
    as: "author",
});

Article.belongsToMany(Tag, {
    through: "article_tags",
    foreignKey: "article_id",
    otherKey: "tag_id",
    as: "tags",
});

Tag.belongsToMany(Article, {
    through: "article_tags",
    foreignKey: "tag_id",
    otherKey: "article_id",
    as: "articles",
});

// Export database and Sequelize instance
db.sequelize = sequelize;
db.Sequelize = Sequelize;

export default db;